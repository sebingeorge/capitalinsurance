@model Capital.Domain.PolicyIssue
@{
    ViewBag.Title = "Issue New Policy";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{string actionName = HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString(); }
<script>
    function Exit() {
        var url = '@Url.Action("Index","Home")';
        location.href = url;
    }
    function Previous() {
        var url = '@Url.Action("Index")';
        location.href = url;
    }
    function Total_Premium() {
      
        var PremiumAmount = parseFloat($("#PremiumAmount").val());
        var PolicyFee = parseFloat($("#PolicyFee").val());
        var AdditionalPreminum = parseFloat($("#ExtraPremium").val());

        if (isNaN(PremiumAmount)) {
            PremiumAmount = 0;
        }
        if (isNaN(PolicyFee)) {
            PolicyFee = 0;
        }
        if (isNaN(AdditionalPreminum)) {
            AdditionalPreminum = 0;
        }

        var TotalPremium = PremiumAmount + PolicyFee + AdditionalPreminum;
        $("#TotalPremium").val(TotalPremium);

        var commissionperc = parseFloat($("#CommissionPerc").val());
        var commissionAmt = (TotalPremium * (commissionperc / 100));
        $("#CommissionAmount").val(commissionAmt);

    }
    function AddRow()
    {
  
        var i = 0;
        var no = 1;
        $('tr[id^="Row_"]').each(function () {
            var id = this.id;
            no++;
            var row = Number(id.replace("Row_", ""));
            if (row > i) {
                i = row;
            }
        });
        i++;
       
        var index = (new Date()).getTime(); // unique indexer
        var clone = $('#Row_0').clone(); // clone the BatchProducts item
        //Update the index of the clone
      
        clone.html($(clone).html().replace(/\Cheque_0__/g, 'Cheque_' + i + '__'));
        clone.html($(clone).html().replace(/\Cheque[0]./g, 'Cheque[' + i + '].'));
        clone.html($(clone).html().replace(/\[0\]/g, '[' + i + ']'));
        clone.html($(clone).html().replace(/\(0\)/g, '(' + i + ')'));
        clone.html($(clone).html().replace(/Row_0/, 'Row_' + i));
        clone.html($(clone).html().replace(/this,0/, 'this,' + i + ''));
        $("#tab_logic").append('<tr id="Row_' + i + '">' + clone.html() + '  </tr>');
        Append_Date();
        }
    function Delete(index) {
        var i = 0;
        var no = 1;
        $('tr[id^="Row_"]').each(function () {
            var id = this.id;
            no++;
            var row = Number(id.replace("Row_", ""));
            if (row > i) {
                i = row;
            }
        });
        i++;
        if (i > 1) {
            $("#Row_" + index).remove();
            for (var j = index + 1; j < i; j++) {
                alert("hi");
                var clone = $("#Row_" + j).clone(true, true);
                alert(clone);
                clone.html($(clone).html().replace(new RegExp("Cheque_" + j + "__", "g"), 'Cheque_' + (j - 1) + '__'));
                clone.html($(clone).html().replace(new RegExp("\\[" + j + "].", "g"), "[" + (j - 1) + "]."));
                              clone.html($(clone).html().replace("Delete(" + j, "Delete(" + (j - 1)));
                clone.html($(clone).html().replace("Row_" + j, "Row_" + (j - 1)));

                clone.html($(clone).html().replace("this," + j, "this," + (j - 1)));
                alert($(clone).html());
                $("#Row_" + j).html(clone.html());
                $("#Row_" + (j)).attr('id', (j - 1));
            }
        }
    }
    function Append_Date()
    {
     $('.form_date').datetimepicker({
         language: 'fr',
         weekStart: 1,
         todayBtn: 1,
         autoclose: 1,
         todayHighlight: 1,
         startView: 2,
         minView: 2,
         forceParse: 0,
         format: 'dd-M-yyyy',
     });
    }
    $(document).ready(function ()
    {
        $(".numbers-only").keypress(function (e) {
            if (e.which == 8 || (e.which == 45 && $(this).val().indexOf('-') == -1) || (e.which == 46 && $(this).val().indexOf('.') == -1) || (e.which > 47 && e.which < 58)) {
            }
            else {
                return false;
            }
        });

    })
 
</script>
<div class="container content-in">
    <div class="row">
        <h1>New Policy (PSF)</h1>
    </div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "createFrom", @id = "box_form" }))
    {
    <div class="row">
        <div class="col-md-12">
            <div class="row form-group">
                <div class="col-md-3">
                    <label>Transaction No.</label>
                    @Html.HiddenFor(m => m.PolicyId)
                    @Html.TextBoxFor(m => m.TranNumber, new { @class = "form_input" })
                    @Html.ValidationMessageFor(m => m.TranNumber, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-12">
                    <label>Client Name</label>
                    @Html.DropDownListFor(m => Model.CusId, (SelectList)ViewBag.Customer, "Select Client", new { @class = "form_input", autocomplete = "off" })
                    @Html.ValidationMessageFor(m => m.CusId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-12">
                    <label>Insured Name</label>
                    @Html.TextBoxFor(m => m.InsuredName, new { @class = "form_input" })
                    @Html.ValidationMessageFor(m => m.InsuredName, "", new { @class = "text-danger" })
                </div>
            </div>
         </div>
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-12">
                    <label>Address 1</label>
                    @Html.TextBoxFor(m => m.Address1, new { @class = "form_input" })
                    @Html.ValidationMessageFor(m => m.Address1, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-12">
                    <label>Address 2</label>
                    @Html.TextBoxFor(m => m.Address2, new { @class = "form_input" })
                    @Html.ValidationMessageFor(m => m.Address2, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
            </div>
            <hr />
    <h2>Insurance Details</h2>
    <div class="row">
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-12">
                    <label>Company</label>
                    @Html.DropDownListFor(m => Model.InsCmpId, (SelectList)ViewBag.Company, "Select Company", new { @class = "form_input", autocomplete = "off" })
                    @Html.ValidationMessageFor(m => m.InsCmpId, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-6">
                    <label>Premium Amount</label>
                    @Html.TextBoxFor(m => m.PremiumAmount, new { @class = "form_input numbers-only", @style = "text-align:right", @onkeyup = "Total_Premium()" })
                    @Html.ValidationMessageFor(m => m.PremiumAmount,"",new { @class = "text-danger" })
                </div>


                <div class="col-md-6">
                    <label>Policy Fees</label>
                    @Html.TextBoxFor(m => m.PolicyFee, new { @class = "form_input numbers-only", @style = "text-align:right", @onkeyup = "Total_Premium()" })
                    @Html.ValidationMessageFor(m => m.PolicyFee, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-12">
                    <label>Product</label>
                    @Html.DropDownListFor(m => Model.InsPrdId, (SelectList)ViewBag.InsuranceProduct, "Select Product", new { @class = "form_input", autocomplete = "off" })
                    @Html.ValidationMessageFor(m => m.InsPrdId, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    <label>Additional Premium</label>
                    @Html.TextBoxFor(m => m.ExtraPremium, new { @class = "form_input numbers-only", @style = "text-align:right", @onkeyup = "Total_Premium()" })
                    @Html.ValidationMessageFor(m => m.ExtraPremium, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    <label>Total Premium</label>
                    @Html.TextBoxFor(m => m.TotalPremium, new { @class = "form_input", @style = "text-align:right",@readonly="readonly" })
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-6">
                    <label>Product Type</label>
                    @Html.DropDownListFor(m => Model.InsCoverId, (SelectList)ViewBag.ProductType, "Select Product", new { @class = "form_input", autocomplete = "off" })
                    @Html.ValidationMessageFor(m => m.InsCoverId, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    <label>Policy Sub Date</label>
                    <div class="input-group date form_date" data-date="" data-date-format="dd MM yyyy" data-link-field="dtp_input2" data-link-format="yyyy-mm-dd">
                        @Html.TextBoxFor(m => m.PolicySubDate, new { @class = "form_input" })
                        <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                    </div>
                    @Html.ValidationMessageFor(m => m.PolicySubDate, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    <label>Commi. Percentage</label>
                    @Html.TextBoxFor(m => m.CommissionPerc, new { @class = "form_input numbers-only", @style = "text-align:right", @onkeyup = "Total_Premium()" })
                    @Html.ValidationMessageFor(m => m.CommissionPerc, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    <label>Commi. Amount</label>
                    @Html.TextBoxFor(m => m.CommissionAmount, new { @class = "form_input", @style = "text-align:right",@readonly="readonly"})
                    @Html.ValidationMessageFor(m => m.CommissionAmount, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-6">
                    <label>Effective Date</label>
                    <div class="input-group date form_date" data-date="" data-date-format="dd MM yyyy" data-link-field="dtp_input2" data-link-format="yyyy-mm-dd">
                     @Html.TextBoxFor(m => m.EffectiveDate, new { @class = "form_input " })
                        <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                    </div>
                    @Html.ValidationMessageFor(m => m.EffectiveDate, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6">
                    <label>Renewal Date</label>
                    <div class="input-group date form_date" data-date="" data-date-format="dd MM yyyy" data-link-field="dtp_input2" data-link-format="yyyy-mm-dd">
                        @Html.TextBoxFor(m => m.RenewalDate, new { @class = "form_input" })
                        <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                    </div>
                    @Html.ValidationMessageFor(m => m.RenewalDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="row form-group">
            </div>
        </div>
            </div>
            <hr />
           <h2>Customer Contact Persons Details</h2>
                <div class="row">
                <div class="col-md-3">
                    <div class="row form-group">
                        <div class="col-md-12">
                            <label>Name</label>
                            @Html.TextBoxFor(m => m.CustContPersonName, new { @class = "form_input" })
                            @Html.ValidationMessageFor(m => m.CustContPersonName, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-12">
                            <label>Mobile / Landline</label>
                            @Html.TextBoxFor(m => m.CustContMobile, new { @class = "form_input" })
                            @Html.ValidationMessageFor(m => m.CustContMobile, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="row form-group">
                        <div class="col-md-12">
                            <label>Designation</label>
                            @Html.TextBoxFor(m => m.CustContDesignation, new { @class = "form_input" })
                            @Html.ValidationMessageFor(m => m.CustContDesignation, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-12">
                            <label>Payment Option</label>
                            @Html.TextBoxFor(m => m.PaymentOption, new { @class = "form_input" })
                            @Html.ValidationMessageFor(m => m.PaymentOption, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="row form-group">
                        <div class="col-md-12">
                            <label>Email</label>
                            @Html.TextBoxFor(m => m.CustContEmail, new { @class = "form_input" })
                            @Html.ValidationMessageFor(m => m.CustContEmail, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-12">
                            <label>Remarks</label>
                            @Html.TextBoxFor(m => m.Remarks, new { @class = "form_input" })
                            @Html.ValidationMessageFor(m => m.Remarks, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="row form-group">
                        <div class="col-md-12">
                            <label>Sales Manager</label>
                            @Html.DropDownListFor(m => Model.SalesMgId, (SelectList)ViewBag.SalesManager, "Select Sales Manager", new { @class = "form_input", autocomplete = "off" })
                            @Html.ValidationMessageFor(m => m.SalesMgId, "", new { @class = "text-danger" })
                        </div>
                      </div>
                </div>
            </div>
        <hr />
    <h2>OPERATION</h2>
    <div class="row">
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-12">
                    <label>Operation Manager</label>
                    @Html.TextBoxFor(m => m.OperationManager, new { @class = "form_input" })
                    @Html.ValidationMessageFor(m => m.OperationManager, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
                <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-6">
                    <label>Policy No.</label>
                    @Html.TextBoxFor(m => m.PolicyNo, new { @class = "form_input" })
                    @Html.ValidationMessageFor(m => m.PolicyNo, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
        <hr />
    <h2>FINANCE</h2>
    <div class="row">
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-12">
                    <label>Finance Manager</label>
                    @Html.TextBoxFor(m => m.FinanceManager, new { @class = "form_input" })
                    @Html.ValidationMessageFor(m => m.FinanceManager, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="row form-group">
                <div class="col-md-6">
                    <label>Payment to</label>
                    @Html.DropDownListFor(m => Model.PaymentTo, (SelectList)ViewBag.Payment,"Select Payment To", new { @class = "form_input", autocomplete = "off" })
                </div>
                <div class="col-md-6">
                    <label>Mode of Payment</label>
                    @Html.DropDownListFor(m => Model.PayModeId, (SelectList)ViewBag.PaymentMode, "Select Payment Mode", new { @class = "form_input", autocomplete = "off" })
                </div>
            </div>
        </div>
        <div class="table-responsive scroll2 col-md-6">
            <table class="table table-bordered " id="tab_logic">
                <tr class="grid_heading">
                    <th></th>
                    <th>Cheque No.</th>
                    <th>Cheque Date</th>
                    <th>Bank Name</th>
                    <th>Branch</th>
                    <th>Cheque Amount</th>
                    <th></th>
                </tr>
                @for (int i = 0; i < Model.Cheque.Count; i++)
                {
                    <tr id="Row_@i">

                        <td style="vertical-align:middle"><a class="glyphicon glyphicon-minus del" style="top:0px" onclick="Delete(@i)"></a></td>
                        <td>
                            @Html.TextBoxFor(model => Model.Cheque[i].ChequeNo, new { @class = "form_input", autocomplete = "off" })
                        </td>
                        <td>
                            <div class="input-group date form_date" data-date="" data-date-format="dd MM yyyy" data-link-field="dtp_input2" data-link-format="yyyy-mm-dd">
                                @Html.TextBoxFor(model => Model.Cheque[i].ChequeDate, new { @class = "form_input" })
                                <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                            </div>
                        </td>
                        <td>
                            @Html.TextBoxFor(model => Model.Cheque[i].BankName, new { @class = "form_input", autocomplete = "off" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => Model.Cheque[i].BankBranch, new { @class = "form_input", autocomplete = "off" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => Model.Cheque[i].ChequeAmt, new { @class = "form_input numbers-only", autocomplete = "off", @style = "text-align:right" })
                        </td>
                        <td style="vertical-align:middle"><a id="add_row" class="glyphicon glyphicon-plus del" style="top:0px" onclick="AddRow()"></a></td>
                        @*<td><img src="~/Images/Plus.png" /></td>*@
                    </tr>
                }
            </table>
        </div>
    </div>
                <div class="row">
                <hr />
                <div class="col-md-12">
                    <button type="button" class="form-button" onclick="Previous()">Previous</button>
                    @if (actionName == "Edit")
                    {
                        <button type="submit" class="form-button right">Update</button>
                    }
                    else if (actionName == "Delete")
                    {
                        <button type="submit" class="form-button right">Delete</button>
                    }
                    else
                    {
                        <button type="submit" class="form-button right">Save</button>
                    }            
                    <button type="button" class="form-button right" onclick="Exit()">Exit</button>
                </div>
            </div>
}
        </div>
