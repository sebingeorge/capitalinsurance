@model Capital.Domain.RegisterViewModel
@{
    ViewBag.Title = "Register";
}
<div class="container content-in">
    <div class="row">
        <h1>Update User</h1>
    </div>
    @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {

        @Html.AntiForgeryToken()
        <div class="row">
            <div class="col-md-12">
                <div class="row form-group">
                    <div class="col-md-3">
                        <label>User Name</label>
                        @Html.HiddenFor(m => m.UserId)
                        @Html.TextBoxFor(m => m.UserName, new { @class = "form_input", @readonly="readonly" })
                        @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div> 
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="row form-group">
                    <div class="col-md-3">
                        <label>Email</label>
                        @Html.TextBoxFor(m => m.Email, new { @class = "form_input" })
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="row form-group">
                    <div class="col-md-3">
                        <label>Password</label>
                        @Html.PasswordFor(m => m.Password, new { @class = "form_input" })
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        <label>Confirm Password</label>
                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form_input" })
                        @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            @*<div class="col-md-12">
                <div class="row form-group">
                    
                </div>
            </div>*@
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="row form-group">
                    <div class="col-md-3">
                        <label>User Role</label>
                        @Html.DropDownListFor(m => Model.UserRole, new SelectList(ViewBag.UserRole,"Value","Text",Model.UserRole), "Select Role", new { @class = "form_input", autocomplete = "off" })
                    </div>
                    <div class="col-md-3">
                        <label>Employee</label>
                        @Html.DropDownListFor(m => Model.SalesMgId, (SelectList)ViewBag.Employee, "Select Person", new { @class = "form_input", autocomplete = "off" })
                    </div>
                    <div class="col-md-3">
                        <label>Reporting Person</label>
                        @Html.DropDownListFor(m => Model.Reporting, new SelectList(ViewBag.Employee, "Value", "Text", Model.Reporting), "Select Reporting Person", new { @class = "form_input", autocomplete = "off" })
                    </div>
                    </div>
                </div>
            </div>
        @*</div>*@
        @*<div class="row">
            <div class="col-md-12">
                <div class="row form-group">
                   
                </div>
            </div>
        </div>*@
        <hr />

            <div class="table-responsive">
                <div class="tab_logic">
                    <table class="table table-bordered" id="tab_logic">
                        <thead>
                            <tr class="grid_heading">
                                <th style="width:20%;">Module</th>
                                <th class="text-center" style="width:10%;">Access</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int j = 0; j < Model.Module.Count; j++)
                            {
                                <tr class="grid_row">
                                    @Html.HiddenFor(m => m.Module[j].ModuleId)
                                    @Html.HiddenFor(m => m.Module[j].ModuleName)
                                    @Html.HiddenFor(m => m.Module[j].isPermission)
                                    <td style="padding-left:5px;">@Model.Module[j].ModuleName</td>
                                    <td align="center">
                                        <input type="checkbox" id="App1_@j" onchange="App1Changed(@j)" @(Model.Module[j].isPermission == 1 ? "checked" : "") />
                                    </td>
                                    <td></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>


        <div class="row">
            <hr />
            <div class="col-md-12">
                <button type="button" class="form-button" onclick="Previous()">Previous</button>
                <button type="button" class="form-button right" onclick="Exit()">Exit</button>
                <button type="submit" class="form-button right">Update</button>
            </div>
        </div>
    }
</div>
<script>
    function App1Changed(row) {
        if ($("#App1_" + row).prop("checked") == true) {
            $("#Module_" + row + "__isPermission").val(1);
        }
        else if ($("#App1_" + row).prop("checked") == false) {
            $("#Module_" + row + "__isPermission").val(0);
        }
    }
    function Previous()
    {
        var url = '@Url.Action("UserList")';
        location.href = url;
    }
    $(function () {
        $('#UserRole').val(@Model.UserRole);

        $('#Reporting').val(@Model.Reporting);
    })
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
